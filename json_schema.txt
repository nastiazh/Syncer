Sync command.
request	{"command":"sync", "folder":"path"}
answer	{"files":
			[
				"path1": <int_edittime>,
				"path2": <int_edittime>,
				"path3": <int_edittime>,
				"path4": <int_edittime>,
				"path5": <int_edittime>
			]
		}


Receiving file from server
request {
			"command":"get",
			"file":"path1"
		}
answer	{
			"response":"OK"|"NOT_EXIST",
			"filesize":<size_in_bytes>
		}
if NOT_EXIST - break
else
...client receive file...
answer	{
			"status":"DONE"
		}


Sending file to server:
request	{
			"command":"send",
			"filename":"path1",
			"filesize":<size_in_bytes>,
			"filetime":<int_seconds>
		}
answer	{"response":"OK"}
...server receive file...
request	{
			"status":"DONE"
		}

Deleting file from server:
request	{
			"command":"delete",
			"file":"path"
		}
answer	{
			"response":"OK"|"ServerException"
		}


Closing connection:
request	{
			"command":"bye"
		}
answer	{
			"response":"bye"
		}

upd_v1.0 (Basic principles of Syncer)
On sturtup create new instance of Syncer(see syncercore.py). This class have method sync() which allow us to fully sync folder.
First call Sync.removing_sync(). It read files from modelfile and built new model from folder.Then they are compared and if file in model
doesn't exist in just built model send command to server to remove it.
Next call Sync.sync_local() which syncronize folder with the server. It's work in this way:
first we send 'sync' command to server and folder we need to sync. In response receive list of files. Then it compares with local
filestrucure.If localfile doesn't have this file add it to download_list, otherwise compare edition time. If local file newer than
server file add it to upload_list, if server file newer than local add it to download_list, if time the same - do nothing. In all of
this three cases remove file from list of local files. After cycle extend upload_list remained local files(this mean that they aren't in server).
Than just download it using functions from Socket class.

upd_v1.1 (What to do if file was removed?)
Store filestructure in json format saved in file. When syncronize build current filestructure and compare it with saved.
If file is in saved structure but not in built - remove it from server. If json file not exist - built file tree and save it in file.
